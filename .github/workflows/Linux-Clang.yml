name: 'Linux Clang'

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { icon: 'üü®', cc: clang-10, cxx: clang++-10, name: 'Clang 10' }
          - { icon: 'üü¶', cc: clang-11, cxx: clang++-11, name: 'Clang 11' }
    name: 'üöß ${{ matrix.icon }} ${{ matrix.name }}'

    steps:

      - name: 'üß∞ Checkout'
        uses: actions/checkout@v2.3.5

      - name: 'üì• Load .env file'
        if: hashFiles('.github/workflows/.env/.env') != ''
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: .github/workflows/.env/

      - name: 'üì• Load .env.linux_clang file'
        if: hashFiles('.github/workflows/.env/.env.linux_clang') != ''
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: .github/workflows/.env/
          mode: linux_clang

      - name: '${{ matrix.icon }} Setup CMake'
        uses: jwlawson/actions-setup-cmake@v1.11
        with:
          cmake-version: '${{env.CMAKE_VERSION}}'
          github-api-token: ${{ secrets.GITHUB_TOKEN }}

      - name: '${{ matrix.icon }} Install packages'
        run: sudo apt-get install git ${{env.INSTALL_PACKAGES}}

      - name: 'üîß Configure'
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}
        run: cmake -S . -B ${{ env.CMAKE_BUILD_PREFIX }}/ -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -DBUILD_TESTS=${{ env.BUILD_TESTS }} -DBUILD_DOCS=${{ env.BUILD_DOCS }} -DBUILD_EXAMPLES=${{ env.BUILD_EXAMPLES }}

      - name: '‚öôÔ∏è Build'
        run: cmake --build ${{ env.CMAKE_BUILD_PREFIX }} --config ${{ env.CMAKE_BUILD_TYPE }} --parallel ${{ env.CMAKE_NUMBER_JOBS }}

      - name: 'üß™ Run tests'
        working-directory: ${{ env.CMAKE_BUILD_PREFIX }}
        run: ctest -C ${{ env.CMAKE_BUILD_TYPE }} --parallel ${{ env.CMAKE_NUMBER_JOBS }} -VV --output-on-failure